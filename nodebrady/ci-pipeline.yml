parameters:
- name: projectName
  displayName: Project Name
  type: string
  default: nodebrady
trigger:
  batch: true
  branches:
    include:
    - '*'
  paths:
    include:
    - nodebrady/
pr: none
pool:
  vmImage: ubuntu-latest
variables:
  helmVersion: 3.2.3
  registryServerName: $(registryName).azurecr.io
  projectName: ${{ parameters.projectName }}
  imageName: ${{ parameters.projectName }}
  imageTag: $(build.buildId)
  helmChartVersion: $(build.buildId)
  kubeNS: $(k8sNamespace)
  


steps:
- bash: echo '##vso[task.setvariable variable=HELM_EXPERIMENTAL_OCI]1'
  displayName: Set environment variable value for HELM_EXPERIMENTAL_OCI
- bash: echo '##vso[task.setvariable variable=projectName]nodebrady'
  displayName: Set environment variable value for projectName
- bash: echo '##vso[task.setvariable variable=kubeNamespace]$(kubeNS)'
  displayName: Set environment variable value for kubeNamespace
- bash: echo "kubeNamespace = $(KUBENAMESPACE)"
- bash: echo "kubeNamespace = $(kubeNamespace)"
- bash: echo "kubeNamespace = $(kubeNS)"
- bash: 'cd $(projectName) && docker build -t $(registryServerName)/$(imageName):$(imageTag)
    .

    '
  failOnStderr: true
  displayName: docker build
- bash: 'echo ''$(registryPassword)'' | docker login $(registryServerName) -u $(registryLogin)
    --password-stdin

    '
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: docker login
- bash: 'docker push $(registryServerName)/$(imageName):$(imageTag)

    '
  failOnStderr: true
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: docker push
- task: HelmInstaller@1
  displayName: install helm
  inputs:
    helmVersionToInstall: $(helmVersion)
- bash: 'cd $(projectName) && helm package --version $(helmChartVersion) --app-version
    $(imageTag) charts/$(projectName)

    '
  failOnStderr: true
  displayName: helm package
- bash: 'cd $(projectName) && echo ''$(registryPassword)'' | helm registry login $(registryName).azurecr.io
    --username $(registryLogin) --password-stdin  && ls -lrt /home/vsts/work/1/s/
    && helm chart save $(build.sourcesdirectory)/nodebrady/charts/nodebrady/ $(registryServerName)/$(projectName):latest
    && helm chart push $(registryServerName)/$(projectName):latest

    '
  failOnStderr: true
  name: helmPush
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: az acr helm push
- publish: $(build.artifactStagingDirectory)
  artifact: build-artifact
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  

- task: HelmInstaller@1
  displayName: 'install helm'
  inputs:
    helmVersionToInstall: $(helmVersion)
- bash: |
   echo "$(aksSpId) | $(aksSpSecret) | $(aksSpTenantId) | kubeNS = $(kubeNS)"
   #az login --service-principal --username $(aksSpId) --password '$(aksSpSecret)' --tenant $(aksSpTenantId)
   az login --service-principal --username $(aksSpId) --password 'JUwWzI87liH1dCZQcT4RhY_FGOWXU86zPQ' --tenant $(aksSpTenantId)
   echo $(az aks get-credentials  -n $(aks)  -g $(rg))
   kubeconfigVal=`echo $(az aks get-credentials  -n $(aks)  -g $(rg))  | awk -F"in " '{print $2}'`
   echo "kubeconfigVal is  $(kubeconfigVal)"
   helm repo add \
        $(registryName) \
        https://$(registryServerName)/helm/v1/repo \
        --username $(registryLogin) \
        --password '$(registryPassword)'
    #helmChartVersion=$(jq .helmChartVersion $(pipeline.workspace)/ci-pipeline/build-artifact/variables.json -r)
    helm repo update
    #helm upgrade --namespace $(kubeNS) --create-namespace  --install  --wait  --version 3.2.3  --set image.repository=$(registryServerName)/$(projectName)  --set ingress.enabled=false  $(projectName)  $(registryServerName)/$(projectName)
    #kubectl get svc,pod,ing --namespace $(kubeNS)
    docker container run -d -it --name $(kubeNS) $(registryServerName)/$(imageName):$(imageTag)
    docker container list
    kubectl run $(aks) --image=$(registryServerName)/$(imageName):$(imageTag) --port=6379 --generator=run/v1 --kubeconfig $(kubeconfigVal)
    kubectl get pods
  failOnStderr: true
  displayName: 'deploy helm chart'

