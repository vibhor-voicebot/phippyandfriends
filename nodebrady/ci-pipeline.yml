trigger:
  batch: true
  branches:
    include: 
    - '*'
  paths:
    include: 
    - nodebrady/
    
pr: none

pool:
  vmImage: ubuntu-latest


variables:
  helmVersion: 3.2.3
  registryServerName: '$(registryName).azurecr.io'
  projectName: ${{ parameters.projectName }}
  imageName: ${{ parameters.projectName }}
  imageTag: $(build.buildId)
  helmChartVersion: $(build.buildId)
  k8sNamespace: $(k8sNamespace)

  parameters:
      projectName: nodebrady
      HELM_EXPERIMENTAL_OCI: 1
  

  # All 9 variables: registryName, registryLogin and registryPassword etc. are declared & assigned with values in runtime in the Azure pipeline UI definition viz Framework

steps:
- bash: echo '##vso[task.setvariable variable=HELM_EXPERIMENTAL_OCI]1'
  displayName: Set environment variable value for HELM_EXPERIMENTAL_OCI
- bash: echo '##vso[task.setvariable variable=projectName]nodebrady'
  displayName: Set environment variable value for projectName  
- bash: |
    cd $(projectName)
    docker build \
        -t $(registryServerName)/$(imageName):$(imageTag) \
        .
  failOnStderr: true
  displayName: 'docker build'
- bash: |
    echo '$(registryPassword)' | docker login \
        $(registryServerName) \
        -u $(registryLogin) \
        --password-stdin
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: 'docker login'
- bash: |
    docker push $(registryServerName)/$(imageName):$(imageTag)
  failOnStderr: true
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: 'docker push'
- task: HelmInstaller@1
  displayName: 'install helm'
  inputs:
    helmVersionToInstall: $(helmVersion)
- bash: |
    cd $(projectName)
    helm package \
        --version $(helmChartVersion) \
        --app-version $(imageTag) \
        charts/$(projectName)
  failOnStderr: true
  displayName: 'helm package'
- bash: |
    cd $(projectName)
    echo '$(registryPassword)' | helm registry login $(registryName).azurecr.io --username $(registryLogin) --password-stdin 
    ls -lrt /home/vsts/work/1/s/
    helm chart save $(build.sourcesdirectory)/nodebrady/charts/nodebrady/ $(registryServerName)/$(projectName):latest
    helm chart push $(registryServerName)/$(projectName):latest
    #echo $(jq -n --arg version "$(helmChartVersion)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json
  failOnStderr: true
  name: helmPush
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: 'az acr helm push'
- publish: $(build.artifactStagingDirectory)
  artifact: build-artifact
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

